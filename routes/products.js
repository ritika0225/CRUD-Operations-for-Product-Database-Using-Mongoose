const express = require('express');\nconst mongoose = require('mongoose');\nconst Product = require('../models/Product');\n\nconst router = express.Router();\n\n// Create a new product\nrouter.post('/', async (req, res) => {\n  try {\n    const { name, price, category } = req.body;\n    const product = new Product({ name, price, category });\n    const saved = await product.save();\n    return res.status(201).json(saved);\n  } catch (err) {\n    if (err.name === 'ValidationError') {\n      return res.status(400).json({ error: err.message });\n    }\n    console.error(err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all products\nrouter.get('/', async (req, res) => {\n  try {\n    const products = await Product.find().sort({ createdAt: -1 });\n    return res.json(products);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get a product by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      return res.status(400).json({ error: 'Invalid product ID' });\n    }\n    const product = await Product.findById(id);\n    if (!product) return res.status(404).json({ error: 'Product not found' });\n    return res.json(product);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Update a product by ID\nrouter.put('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      return res.status(400).json({ error: 'Invalid product ID' });\n    }\n    const updates = req.body;\n    const options = { new: true, runValidators: true };\n    const updated = await Product.findByIdAndUpdate(id, updates, options);\n    if (!updated) return res.status(404).json({ error: 'Product not found' });\n    return res.json(updated);\n  } catch (err) {\n    if (err.name === 'ValidationError') {\n      return res.status(400).json({ error: err.message });\n    }\n    console.error(err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Delete a product by ID\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    if (!mongoose.Types.ObjectId.isValid(id)) {\n      return res.status(400).json({ error: 'Invalid product ID' });\n    }\n    const deleted = await Product.findByIdAndDelete(id);\n    if (!deleted) return res.status(404).json({ error: 'Product not found' });\n    return res.json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nmodule.exports = router;